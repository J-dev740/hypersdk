// Copyright (C) 2023, Ava Labs, Inc. All rights reserved.
// See the file LICENSE for licensing terms.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ava-labs/hypersdk/chain (interfaces: StateManager)

// Package chain is a generated GoMock package.
package chain

import (
	reflect "reflect"

	ids "github.com/ava-labs/avalanchego/ids"
	gomock "github.com/golang/mock/gomock"
)

// MockStateManager is a mock of StateManager interface.
type MockStateManager struct {
	ctrl     *gomock.Controller
	recorder *MockStateManagerMockRecorder
}

// MockStateManagerMockRecorder is the mock recorder for MockStateManager.
type MockStateManagerMockRecorder struct {
	mock *MockStateManager
}

// NewMockStateManager creates a new mock instance.
func NewMockStateManager(ctrl *gomock.Controller) *MockStateManager {
	mock := &MockStateManager{ctrl: ctrl}
	mock.recorder = &MockStateManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateManager) EXPECT() *MockStateManagerMockRecorder {
	return m.recorder
}

// HeightKey mocks base method.
func (m *MockStateManager) HeightKey() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeightKey")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// HeightKey indicates an expected call of HeightKey.
func (mr *MockStateManagerMockRecorder) HeightKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeightKey", reflect.TypeOf((*MockStateManager)(nil).HeightKey))
}

// IncomingWarpKey mocks base method.
func (m *MockStateManager) IncomingWarpKey(arg0, arg1 ids.ID) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncomingWarpKey", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// IncomingWarpKey indicates an expected call of IncomingWarpKey.
func (mr *MockStateManagerMockRecorder) IncomingWarpKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncomingWarpKey", reflect.TypeOf((*MockStateManager)(nil).IncomingWarpKey), arg0, arg1)
}

// OutgoingWarpKey mocks base method.
func (m *MockStateManager) OutgoingWarpKey(arg0 ids.ID) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutgoingWarpKey", arg0)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// OutgoingWarpKey indicates an expected call of OutgoingWarpKey.
func (mr *MockStateManagerMockRecorder) OutgoingWarpKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutgoingWarpKey", reflect.TypeOf((*MockStateManager)(nil).OutgoingWarpKey), arg0)
}
