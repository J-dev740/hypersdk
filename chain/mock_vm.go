// Copyright (C) 2023, Ava Labs, Inc. All rights reserved.
// See the file LICENSE for licensing terms.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ava-labs/hypersdk/chain (interfaces: VM)

// Package chain is a generated GoMock package.
package chain

import (
	context "context"
	reflect "reflect"
	time "time"

	ids "github.com/ava-labs/avalanchego/ids"
	block "github.com/ava-labs/avalanchego/snow/engine/snowman/block"
	validators "github.com/ava-labs/avalanchego/snow/validators"
	trace "github.com/ava-labs/avalanchego/trace"
	logging "github.com/ava-labs/avalanchego/utils/logging"
	merkledb "github.com/ava-labs/avalanchego/x/merkledb"
	workers "github.com/ava-labs/hypersdk/workers"
	gomock "github.com/golang/mock/gomock"
)

// MockVM is a mock of VM interface.
type MockVM struct {
	ctrl     *gomock.Controller
	recorder *MockVMMockRecorder
}

// MockVMMockRecorder is the mock recorder for MockVM.
type MockVMMockRecorder struct {
	mock *MockVM
}

// NewMockVM creates a new mock instance.
func NewMockVM(ctrl *gomock.Controller) *MockVM {
	mock := &MockVM{ctrl: ctrl}
	mock.recorder = &MockVMMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVM) EXPECT() *MockVMMockRecorder {
	return m.recorder
}

// Accepted mocks base method.
func (m *MockVM) Accepted(arg0 context.Context, arg1 *StatelessBlock) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Accepted", arg0, arg1)
}

// Accepted indicates an expected call of Accepted.
func (mr *MockVMMockRecorder) Accepted(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accepted", reflect.TypeOf((*MockVM)(nil).Accepted), arg0, arg1)
}

// AcceptedSyncableBlock mocks base method.
func (m *MockVM) AcceptedSyncableBlock(arg0 context.Context, arg1 *SyncableBlock) (block.StateSyncMode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptedSyncableBlock", arg0, arg1)
	ret0, _ := ret[0].(block.StateSyncMode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptedSyncableBlock indicates an expected call of AcceptedSyncableBlock.
func (mr *MockVMMockRecorder) AcceptedSyncableBlock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptedSyncableBlock", reflect.TypeOf((*MockVM)(nil).AcceptedSyncableBlock), arg0, arg1)
}

// ChainID mocks base method.
func (m *MockVM) ChainID() ids.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainID")
	ret0, _ := ret[0].(ids.ID)
	return ret0
}

// ChainID indicates an expected call of ChainID.
func (mr *MockVMMockRecorder) ChainID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainID", reflect.TypeOf((*MockVM)(nil).ChainID))
}

// GetStatelessBlock mocks base method.
func (m *MockVM) GetStatelessBlock(arg0 context.Context, arg1 ids.ID) (*StatelessBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatelessBlock", arg0, arg1)
	ret0, _ := ret[0].(*StatelessBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatelessBlock indicates an expected call of GetStatelessBlock.
func (mr *MockVMMockRecorder) GetStatelessBlock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatelessBlock", reflect.TypeOf((*MockVM)(nil).GetStatelessBlock), arg0, arg1)
}

// HRP mocks base method.
func (m *MockVM) HRP() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HRP")
	ret0, _ := ret[0].(string)
	return ret0
}

// HRP indicates an expected call of HRP.
func (mr *MockVMMockRecorder) HRP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HRP", reflect.TypeOf((*MockVM)(nil).HRP))
}

// IsBootstrapped mocks base method.
func (m *MockVM) IsBootstrapped() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBootstrapped")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBootstrapped indicates an expected call of IsBootstrapped.
func (mr *MockVMMockRecorder) IsBootstrapped() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBootstrapped", reflect.TypeOf((*MockVM)(nil).IsBootstrapped))
}

// IsRepeat mocks base method.
func (m *MockVM) IsRepeat(arg0 context.Context, arg1 []*Transaction) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRepeat", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRepeat indicates an expected call of IsRepeat.
func (mr *MockVMMockRecorder) IsRepeat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRepeat", reflect.TypeOf((*MockVM)(nil).IsRepeat), arg0, arg1)
}

// LastAcceptedBlock mocks base method.
func (m *MockVM) LastAcceptedBlock() *StatelessBlock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastAcceptedBlock")
	ret0, _ := ret[0].(*StatelessBlock)
	return ret0
}

// LastAcceptedBlock indicates an expected call of LastAcceptedBlock.
func (mr *MockVMMockRecorder) LastAcceptedBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastAcceptedBlock", reflect.TypeOf((*MockVM)(nil).LastAcceptedBlock))
}

// Logger mocks base method.
func (m *MockVM) Logger() logging.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(logging.Logger)
	return ret0
}

// Logger indicates an expected call of Logger.
func (mr *MockVMMockRecorder) Logger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockVM)(nil).Logger))
}

// Mempool mocks base method.
func (m *MockVM) Mempool() Mempool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mempool")
	ret0, _ := ret[0].(Mempool)
	return ret0
}

// Mempool indicates an expected call of Mempool.
func (mr *MockVMMockRecorder) Mempool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mempool", reflect.TypeOf((*MockVM)(nil).Mempool))
}

// RecordRootCalculated mocks base method.
func (m *MockVM) RecordRootCalculated(arg0 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordRootCalculated", arg0)
}

// RecordRootCalculated indicates an expected call of RecordRootCalculated.
func (mr *MockVMMockRecorder) RecordRootCalculated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordRootCalculated", reflect.TypeOf((*MockVM)(nil).RecordRootCalculated), arg0)
}

// RecordStateChanges mocks base method.
func (m *MockVM) RecordStateChanges(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordStateChanges", arg0)
}

// RecordStateChanges indicates an expected call of RecordStateChanges.
func (mr *MockVMMockRecorder) RecordStateChanges(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordStateChanges", reflect.TypeOf((*MockVM)(nil).RecordStateChanges), arg0)
}

// RecordStateOperations mocks base method.
func (m *MockVM) RecordStateOperations(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordStateOperations", arg0)
}

// RecordStateOperations indicates an expected call of RecordStateOperations.
func (mr *MockVMMockRecorder) RecordStateOperations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordStateOperations", reflect.TypeOf((*MockVM)(nil).RecordStateOperations), arg0)
}

// RecordWaitSignatures mocks base method.
func (m *MockVM) RecordWaitSignatures(arg0 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordWaitSignatures", arg0)
}

// RecordWaitSignatures indicates an expected call of RecordWaitSignatures.
func (mr *MockVMMockRecorder) RecordWaitSignatures(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordWaitSignatures", reflect.TypeOf((*MockVM)(nil).RecordWaitSignatures), arg0)
}

// Registry mocks base method.
func (m *MockVM) Registry() (ActionRegistry, AuthRegistry) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Registry")
	ret0, _ := ret[0].(ActionRegistry)
	ret1, _ := ret[1].(AuthRegistry)
	return ret0, ret1
}

// Registry indicates an expected call of Registry.
func (mr *MockVMMockRecorder) Registry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Registry", reflect.TypeOf((*MockVM)(nil).Registry))
}

// Rejected mocks base method.
func (m *MockVM) Rejected(arg0 context.Context, arg1 *StatelessBlock) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Rejected", arg0, arg1)
}

// Rejected indicates an expected call of Rejected.
func (mr *MockVMMockRecorder) Rejected(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rejected", reflect.TypeOf((*MockVM)(nil).Rejected), arg0, arg1)
}

// Rules mocks base method.
func (m *MockVM) Rules(arg0 int64) Rules {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rules", arg0)
	ret0, _ := ret[0].(Rules)
	return ret0
}

// Rules indicates an expected call of Rules.
func (mr *MockVMMockRecorder) Rules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rules", reflect.TypeOf((*MockVM)(nil).Rules), arg0)
}

// SetLastAccepted mocks base method.
func (m *MockVM) SetLastAccepted(arg0 *StatelessBlock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLastAccepted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLastAccepted indicates an expected call of SetLastAccepted.
func (mr *MockVMMockRecorder) SetLastAccepted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastAccepted", reflect.TypeOf((*MockVM)(nil).SetLastAccepted), arg0)
}

// State mocks base method.
func (m *MockVM) State() (*merkledb.Database, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State")
	ret0, _ := ret[0].(*merkledb.Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// State indicates an expected call of State.
func (mr *MockVMMockRecorder) State() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockVM)(nil).State))
}

// StateManager mocks base method.
func (m *MockVM) StateManager() StateManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateManager")
	ret0, _ := ret[0].(StateManager)
	return ret0
}

// StateManager indicates an expected call of StateManager.
func (mr *MockVMMockRecorder) StateManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateManager", reflect.TypeOf((*MockVM)(nil).StateManager))
}

// StateReady mocks base method.
func (m *MockVM) StateReady() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateReady")
	ret0, _ := ret[0].(bool)
	return ret0
}

// StateReady indicates an expected call of StateReady.
func (mr *MockVMMockRecorder) StateReady() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateReady", reflect.TypeOf((*MockVM)(nil).StateReady))
}

// Tracer mocks base method.
func (m *MockVM) Tracer() trace.Tracer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tracer")
	ret0, _ := ret[0].(trace.Tracer)
	return ret0
}

// Tracer indicates an expected call of Tracer.
func (mr *MockVMMockRecorder) Tracer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tracer", reflect.TypeOf((*MockVM)(nil).Tracer))
}

// UpdateSyncTarget mocks base method.
func (m *MockVM) UpdateSyncTarget(arg0 *StatelessBlock) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSyncTarget", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSyncTarget indicates an expected call of UpdateSyncTarget.
func (mr *MockVMMockRecorder) UpdateSyncTarget(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSyncTarget", reflect.TypeOf((*MockVM)(nil).UpdateSyncTarget), arg0)
}

// ValidatorState mocks base method.
func (m *MockVM) ValidatorState() validators.State {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatorState")
	ret0, _ := ret[0].(validators.State)
	return ret0
}

// ValidatorState indicates an expected call of ValidatorState.
func (mr *MockVMMockRecorder) ValidatorState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatorState", reflect.TypeOf((*MockVM)(nil).ValidatorState))
}

// Verified mocks base method.
func (m *MockVM) Verified(arg0 context.Context, arg1 *StatelessBlock) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Verified", arg0, arg1)
}

// Verified indicates an expected call of Verified.
func (mr *MockVMMockRecorder) Verified(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verified", reflect.TypeOf((*MockVM)(nil).Verified), arg0, arg1)
}

// Workers mocks base method.
func (m *MockVM) Workers() *workers.Workers {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Workers")
	ret0, _ := ret[0].(*workers.Workers)
	return ret0
}

// Workers indicates an expected call of Workers.
func (mr *MockVMMockRecorder) Workers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Workers", reflect.TypeOf((*MockVM)(nil).Workers))
}
